pipeline {
    agent any
    environment {
        TRIVY_IMAGE = "aquasec/trivy"  // Trivy –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        DOCKER_IMAGE_NAME = "deposit-service"  // üîπ –ù–∞–∑–≤–∞–Ω–∏–µ Docker-–æ–±—Ä–∞–∑–∞
        DOCKERFILE_PATH = "./Dockerfile"  // üîπ –ü—É—Ç—å –∫ Dockerfile –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    }
    stages {
        stage('Git Repository Clone') {
            steps {
                script {
                    try {
                        // –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–∑ Git
                        git url: 'https://github.com/anomaliyamai/test_task', branch: 'main'
                    } catch (Exception e) {
                        // –í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
                        error "Failure with cloning repository: ${e.message}"
                    }
                }
            }
        }

        stage('Secret Scanning') {
            steps {
                script {
                    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞
                    sh(
                        script: '''
                            docker run --rm \
                            -v ${WORKSPACE}:/src \
                            zricethezav/gitleaks:latest \
                            detect \
                                --source="/src" \
                                --report-path="/src/gitleaks_report.json" \
                                --exit-code 0  
                        ''',
                        returnStatus: true  
                    )
        
                    // –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç (–¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π)
                    archiveArtifacts artifacts: 'gitleaks_report.json', allowEmptyArchive: true
                }
            }
        }

        

        stage('Scan Repository with Trivy') {
            steps {
                script {
                    // üîπ –ó–∞–ø—É—Å–∫–∞–µ–º Trivy –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ JSON
                    sh '''
                        docker run --rm --network host -v $(pwd):/repo aquasec/trivy fs --severity HIGH,CRITICAL --format json -o trivy_report.json /repo || true
                    '''

                    // üîπ –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
                    archiveArtifacts artifacts: 'trivy_report.json', allowEmptyArchive: true
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // üîπ –°–æ–±–∏—Ä–∞–µ–º Docker-–æ–±—Ä–∞–∑ –∏–∑ Dockerfile
                    sh 'docker build -t $DOCKER_IMAGE_NAME -f $DOCKERFILE_PATH .'
                }
            }
        }

        stage('DAST: Trivy') {
            steps {
                script {
                    // üîπ –ó–∞–ø—É—Å–∫–∞–µ–º Trivy –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ JSON
                    sh '''
                        docker run --rm --network host -v /var/run/docker.sock:/var/run/docker.sock \
                        $TRIVY_IMAGE image --severity HIGH,CRITICAL --format json -o trivy_image_report.json $DOCKER_IMAGE_NAME || true
                    '''

                    // üîπ –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∫–∞–∫ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
                    archiveArtifacts artifacts: 'trivy_image_report.json', allowEmptyArchive: true
                }
            }
        }
        stage('SonarQube analysis') {
            steps {
                script {
                    
                    def scannerHome = tool 'sonar-scanner';
                    withSonarQubeEnv('sonarqube-server') {
                        sh "/opt/sonar-scanner-5.0.1.3006-linux/bin/sonar-scanner"
                    }
                }
            }
        }
        stage('SAST: Semgrep') {
            steps {
                script {
                    sh '''
                        # –ó–∞–ø—É—Å–∫ –≤ Docker (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ –∞–≥–µ–Ω—Ç)
                        docker run --rm -v "${WORKSPACE}:/src" returntocorp/semgrep semgrep scan \
                        --config=auto --json -o semgrep_report.json
                    '''
                    archiveArtifacts artifacts: 'semgrep_report.json', allowEmptyArchive: true
                }
            }
        }
    }
}
